<?php
/**
 * @file
 * Module file for page_example_module.
 */

/**
 * @defgroup page_example Example: Page
 * @ingroup examples
 * @{
 * This example demonstrates how a module can display a page at a given URL.
 *
 * It's important to understand how the menu system works in order to
 * implement your own pages. See the Menu Example module for some insight.
 *
 * Examples:
 *
 * - simple routing
 * - routing with arguments
 * - alter route defined elsewhere
 * - parameter converter (Drupal\Core\ParamConverter\ParamConverterManager, Drupal\Core\ParamConverter\EntityConverter, https://drupal.org/node/2122223)
 * - DynamicRouter (Symfony\Cmf\Component\Routing\DynamicRouter) and Dynamic routes (https://drupal.org/node/2122201)
 * - route enhancers (Drupal\Core\DependencyInjection\Compiler\RegisterRouteEnhancersPass)
 *
 * @see menu_example
 */

/**
 * Implements hook_help().
 *
 * Through hook_help(), a module can make documentation available to the user
 * for the module as a whole or for specific paths. Where the help appears
 * depends on the $path specified.
 *
 * Help text will be displayed in the region designated for help text. Typically
 * this is the 'Help' region which can be found at admin/structure/block.
 *
 * The help text in the first example below, will appear on the simple page at
 * examples/page_example/simple.
 *
 * The second example text will be available on the admin help page (admin/help)
 * in the list of help topics using the name of the module. To specify help in
 * the admin section combine the path and the module name using '#' as in the
 * example below.
 *
 * @see hook_help()
 */
function page_example_help($path, $arg) {
  switch ($path) {
    case 'examples/page_example/simple':
      // Help text for the simple page registered for this path.
      return t('This is help text for the simple page.');

    case 'admin/help#page_example':
      // Help text for the admin section, using the module name in the path.
      return t("This is help text created in the page example's second case.");
  }
}

/**
 * Implements hook_permission().
 *
 * Since the access to our new custom pages will be granted based on
 * special permissions, we need to define what those permissions are here.
 * This ensures that they are available to enable on the permissions
 * administration pages.
 */
function page_example_permission() {
  return array(
    'access simple page' => array(
      'title' => t('Access simple page'),
      'description' => t('Allow users to access simple page'),
    ),
    'access arguments page' => array(
      'title' => t('Access page with arguments'),
      'description' => t('Allow users to access page with arguments'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * This hook defines menu items, links that appear in a menu. Here we define
 * menu links with their title, path, description etc. All things related to
 * handling the page request, like access control and request handling is
 * defined in the routing definition in page_example.routing.yml.
 *
 * @see hook_menu()
 * @see menu_example
 */
function page_example_menu() {

  // These menu item will be created in the Tools menu, which is the default.
  $items['examples/page_example'] = array(
    'title' => 'Page Example',
    'route_name' => 'page_example_description',
    'expanded' => TRUE,
  );

  $items['examples/page_example/simple'] = array(
    'title' => 'Simple - no arguments',
    'route_name' => 'page_example_simple',
  );

  // Notice there is not a declaration entry for
  // 'examples/page_example/arguments/{first}/{second}' because that is only a
  // routing item, and not a menu item (which needs to appear on menu).
  return $items;
}

/**
 * @} End of "defgroup page_example".
 */
